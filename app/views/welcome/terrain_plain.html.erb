<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - terrain</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #61443e;
				font-family:Monospace;
				font-size:13px;
				text-align:center;

				background-color: #bfd1e5;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				padding: 5px;
			}

			a {

				color: #a06851;
			}

		</style>
	</head>
	<body>

		<div id="container"><br /><br /><br /><br /><br />Generating world...</div>
		<div id="info"><a href="http://threejs.org" target="_blank">three.js</a> - webgl terrain demo<br />(left click: forward, right click: backward)</div>

		<script src="/assets/three.min.js"></script>

		<script src="/assets/controls/FirstPersonControls.js"></script>

		<script src="/assets/ImprovedNoise.js"></script>
		<script src="/assets/Detector.js"></script>
		<script src="/assets/libs/stats.min.js"></script>

		<script>

			if ( ! Detector.webgl ) {

				Detector.addGetWebGLMessage();
				document.getElementById( 'container' ).innerHTML = "";

			}

			var container, stats;

			var camera, controls, scene, renderer;

			var mesh, texture;

      var globalWidth = 1500, globalDepth = 1500;
			var worldWidth = 3, worldDepth = 3,
			worldHalfWidth = worldWidth / 2, worldHalfDepth = worldDepth / 2;

      var clock = new THREE.Clock();
      var mouse2D;
      var projector;
      var raycaster;

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 20000 );
        camera.position.y = 800;
        camera.position.z = 800;

				scene = new THREE.Scene();

				controls = new THREE.FirstPersonControls( camera );
				controls.movementSpeed = 1000;
				controls.lookSpeed = 0.1;

				data = generateHeight( worldWidth, worldDepth );

				camera.position.y = data[ worldHalfWidth + worldHalfDepth * worldWidth ] + 500;

				var geometry = new THREE.PlaneGeometry( globalWidth, globalDepth, worldWidth - 1, worldDepth - 1 );
				geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

				for ( var i = 0, l = geometry.vertices.length; i < l; i ++ ) {

					geometry.vertices[ i ].y = data[ i ] * 10;

				}

				texture = new THREE.Texture( generateTexture( data, worldWidth, worldDepth ), new THREE.UVMapping(), THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping );
				texture.needsUpdate = true;

				mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { map: texture } ) );
				scene.add( mesh );

				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );

				container.innerHTML = "";

				container.appendChild( renderer.domElement );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );
        
        mouse2D = new THREE.Vector3( 0, 10000, 0.5 );
				projector = new THREE.Projector();

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
			}


			function onDocumentMouseMove( event ) {

				event.preventDefault();

				mouse2D.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				mouse2D.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

			}


      function getClosestVertice( obj, point ) {
        
        var width = point.x + globalWidth/2;
        var depth = point.z + globalDepth/2;
        
        var widthOther = ( width + (globalWidth/4) ) / (globalWidth/2);
        var widthPos = Math.floor(widthOther);

        var depthOther = ( depth + (globalDepth/4) ) / (globalDepth/2);
        var depthPos = Math.floor(depthOther);

        return ( depthPos * worldDepth ) + widthPos;
      }


      function onDocumentMouseDown( event ) {

				event.preventDefault();

				var intersects = raycaster.intersectObjects( scene.children );

				if ( intersects.length > 0 ) {
          var obj = intersects[0].object;
          var posInArr = getClosestVertice( obj, intersects[0].point );
          var geometry = obj.geometry;
          var v = geometry.vertices[posInArr];
          v.y -= 50;
          geometry.verticesNeedUpdate = true;
				}
      }


			function getRealIntersector( intersects ) {

				for( i = 0; i < intersects.length; i++ ) {

					intersector = intersects[ i ];

					if ( intersector.object != rollOverMesh ) {

						return intersector;

					}

				}

				return null;

			}


			function generateHeight( width, height ) {

				var size = width * height, data = new Float32Array( size );

        data[0] = 36.3;
        data[1] = -15.5;
        data[2] = 18.2;
        data[3] = 19.3;
        data[4] = 3.4;
        data[5] = 2.96;
        data[6] = 1.35;
        data[7] = 14.34;
        data[8] = 54.65;

				return data;

			}


			function generateTexture( data, width, height ) {

				var canvas, canvasScaled, context, image, imageData,
				level, diff, vector3, sun, shade;

				vector3 = new THREE.Vector3( 0, 0, 0 );

				sun = new THREE.Vector3( 1, 1, 1 );
				sun.normalize();

				canvas = document.createElement( 'canvas' );
				canvas.width = width;
				canvas.height = height;

				context = canvas.getContext( '2d' );
				context.fillStyle = '#a0a0a0';
				context.fillRect( 0, 0, width, height );

				image = context.getImageData( 0, 0, canvas.width, canvas.height );
				imageData = image.data;

				//for ( var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++ ) {
				for ( var i = 0, j = 0, l = 8; i < l; i += 1, j ++ ) {

					vector3.x = data[ j ];
					vector3.y = 2;
					vector3.z = data[ j ];
					vector3.normalize();

					shade = vector3.dot( sun );

					imageData[ i ] = ( 96 + shade * 128 ) * ( 0.5 + data[ j ] * 0.007 );
					imageData[ i + 1 ] = ( 32 + shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
					imageData[ i + 2 ] = ( shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
				}

				context.putImageData( image, 0, 0 );

				// Scaled 4x

				canvasScaled = document.createElement( 'canvas' );
				canvasScaled.width = width * 4;
				canvasScaled.height = height * 4;

				context = canvasScaled.getContext( '2d' );
				context.scale( 4, 4 );
				context.drawImage( canvas, 0, 0 );

				image = context.getImageData( 0, 0, canvasScaled.width, canvasScaled.height );
				imageData = image.data;

				//for ( var i = 0, l = imageData.length; i < l; i += 4 ) {
				for ( var i = 0, l = 8; i < l; i += 1 ) {

					var v = 3; //~~ ( Math.random() * 5 );

					imageData[ i ] += v;
					imageData[ i + 1 ] += v;
					imageData[ i + 2 ] += v;

				}

				context.putImageData( image, 0, 0 );

				return canvasScaled;

			}


			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}


			function render() {

				raycaster = projector.pickingRay( mouse2D.clone(), camera );
				//controls.update( clock.getDelta() );
        camera.rotation.y = .3;
        camera.lookAt( scene.position );
				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>
