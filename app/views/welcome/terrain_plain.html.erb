<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - geometry - terrain</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				color: #61443e;
				font-family:Monospace;
				font-size:13px;

				background-color: #bfd1e5;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				position: relative;
				top: 0px; width: 10%;
				padding: 5px;
			}

			a {

				color: #a06851;
			}

		</style>
	</head>
	<body>
    <div id="test">Hello</div>
		<div id="container" style="width:400px; height:400px; float:left; position:relative;"><br /><br /><br /><br /><br />Generating world...</div>
		<div id="info" style="float:left"><a href="http://threejs.org" target="_blank">three.js</a> - webgl terrain demo<br />(left click: forward, right click: backward)</div>

		<script src="/assets/three.min.js"></script>

    <script src="/assets/controls/TrackballControls.js"></script>
		<script src="/assets/controls/FirstPersonControls.js"></script>

		<script src="/assets/ImprovedNoise.js"></script>
		<script src="/assets/Detector.js"></script>
		<script src="/assets/libs/stats.min.js"></script>
		<script src="/assets/ColladaLoader.js"></script>

		<script>

			if ( ! Detector.webgl ) {

				Detector.addGetWebGLMessage();
				document.getElementById( 'container' ).innerHTML = "";

			}

			var container, stats;

			var camera, controls, scene, renderer;

			var mesh, texture;

      var globalWidth = 1000, globalDepth = 1000;
			var worldWidth = 40, worldDepth = 40,
			worldHalfWidth = worldWidth / 2, worldHalfDepth = worldDepth / 2;

      var clock = new THREE.Clock();
      var mouse2D;
      var projector;
      var raycaster;
      var objects;
      var voxelPosition = new THREE.Vector3(), tmpVec = new THREE.Vector3(), normalMatrix = new THREE.Matrix3();

      var divHeight, divWidth;

			init();
			animate();

			function init() {
        objects = [];
				container = document.getElementById( 'container' );

        divHeight = container.clientHeight;
        divWidth = container.clientWidth;

				//camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 20000 );
				camera = new THREE.PerspectiveCamera( 60, divWidth / divHeight, 1, 20000 );
        camera.position.y = 1200;
        camera.position.z = 1400;

				scene = new THREE.Scene();

				controls = new THREE.FirstPersonControls( camera );
				controls.movementSpeed = 1000;
				controls.lookSpeed = 0.1;

				data = generateHeight( worldWidth, worldDepth );

				camera.position.y = data[ worldHalfWidth + worldHalfDepth * worldWidth ] + 500;

				var geometry = new THREE.PlaneGeometry( globalWidth, globalDepth, worldWidth - 1, worldDepth - 1 );
				geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

				for ( var i = 0, l = geometry.vertices.length; i < l; i ++ ) {

					geometry.vertices[ i ].y = data[ i ] * 10;

				}

				texture = new THREE.Texture( generateTexture( data, worldWidth, worldDepth ), new THREE.UVMapping(), THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping );
				texture.needsUpdate = true;

				mesh = new THREE.Mesh( geometry, new THREE.MeshBasicMaterial( { map: texture } ) );
				scene.add( mesh );

				renderer = new THREE.WebGLRenderer();
				//renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.setSize( divWidth, divHeight );

				container.innerHTML = "";

				container.appendChild( renderer.domElement );

				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );
        
        mouse2D = new THREE.Vector3( 0, 10000, 0.5 );
				projector = new THREE.Projector();

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'mousedown', onDocumentMouseDown, false );
			}


			function onDocumentMouseMove( event ) {

				event.preventDefault();

				mouse2D.x = ( event.clientX / divWidth ) * 2 - 1;
        //I added 35 here because it seems that the mouse was off if i didn't do this
				mouse2D.y = - ( event.clientY / (divHeight+35) ) * 2 + 1;

			}


      function getClosestVertice( obj, point ) {
        
        var width = point.x + globalWidth/2;
        var depth = point.z + globalDepth/2;
        
        var widthOther = ( width + ( globalWidth/((worldWidth-1)*2) ) ) / (globalWidth/(worldWidth-1));
        var widthPos = Math.floor(widthOther);

        var depthOther = ( depth + ( globalDepth/((worldDepth-1)*2) ) ) / (globalDepth/(worldDepth-1));
        var depthPos = Math.floor(depthOther);

        return ( depthPos * worldDepth ) + widthPos;
      }
      
      function setVoxelPosition( intersector ) {
        //if(intersector == null || intersector.object == null || intersector.object.matrixWorld == null)
        //  return null

				normalMatrix.getNormalMatrix( intersector.object.matrixWorld );

        //if(intersector.face == null || intersector.face.normal == null)
        //  return null

				tmpVec.copy( intersector.face.normal );
				tmpVec.applyMatrix3( normalMatrix ).normalize();

				voxelPosition.addVectors( intersector.point, tmpVec );

				voxelPosition.x = Math.floor( voxelPosition.x / 50 ) * 50 + 25;
				voxelPosition.y = Math.floor( voxelPosition.y / 50 ) * 50 + 25 + 75;
				voxelPosition.z = Math.floor( voxelPosition.z / 50 ) * 50 + 25;

			}

      function onDocumentMouseDown( event ) {
        event.preventDefault();

				var intersects = raycaster.intersectObjects( scene.children );
        /*
				if ( intersects.length > 0 ) {

					intersector = intersects[0];

					// create cube
          setVoxelPosition( intersector );
          
          monkey_mat = new THREE.MeshNormalMaterial();
          monkey_mat.shading = THREE.SmoothShading


          var loader = new THREE.JSONLoader();
          loader.load( '/obj/monkey.js', function ( geometry ) {
            geometry.computeVertexNormals();

            monkey = new THREE.Mesh( geometry, monkey_mat )
            
            monkey.position.copy( voxelPosition );
            //monkey.rotation.x = 1;
            //monkey.rotation.y = 3;

            monkey.scale.x = monkey.scale.y = monkey.scale.z = 100;

            monkey.matrixAutoUpdate = false;
            monkey.updateMatrix();
            objects.push( monkey );
            objects[0].matrixAutoUpdate = true ;
            scene.add( monkey );

          } );

        }
        */
        
				event.preventDefault();

				var intersects = raycaster.intersectObjects( scene.children );

				if ( intersects.length > 0 ) {
          var obj = intersects[0].object;
          var posInArr = getClosestVertice( obj, intersects[0].point );
          var geometry = obj.geometry;
          for(var i = -3; i <= 3; i ++) {
            for(var j = -3; j <= 3; j ++) {
              var newPos = posInArr + (i * worldDepth) + j;
              var size = worldDepth * worldWidth;
              if( newPos >= 0 && newPos < size ) {
                var v = geometry.vertices[newPos];
                v.y += 50;
              }
            }
          }
          geometry.verticesNeedUpdate = true;
				}
        
      }


      function generateHeight( width, height ) {
 
        var size = width * height, data = new Float32Array( size ),
         perlin = new ImprovedNoise(), quality = 1, z = Math.random() * 100;
 
        /*
         for ( var i = 0; i < size; i ++ ) {
 
           data[ i ] = 0
 
         }
 
         for ( var j = 0; j < 4; j ++ ) {
 
           for ( var i = 0; i < size; i ++ ) {
 
             var x = i % width, y = ~~ ( i / width );
             data[ i ] += Math.abs( perlin.noise( x / quality, y / quality, z ) * quality * 1.75 );
 
 
           }
 
           quality *= 5;
 
         }
         */
        for ( var i = 0; i < size; i ++ ) {

          data[ i ] = 10;

        }
 
         return data;
 
       }


/*
			function generateHeight( width, height ) {

				var size = width * height, data = new Float32Array( size );

        for(var i = 0; i < size; i ++) {
          data[i] = 10;
        }
        /*
        //data[0] = 36.3;
        //data[1] = -15.5;
        //data[2] = 18.2;
        //data[3] = 19.3;
        //data[4] = 3.4;
        //data[5] = 2.96;
        //data[6] = 1.35;
        //data[7] = 14.34;
        //data[8] = 24.65;
        
				return data;

			}
*/

       function generateTexture( data, width, height ) {
 
         var canvas, canvasScaled, context, image, imageData,
         level, diff, vector3, sun, shade;
 
         vector3 = new THREE.Vector3( 0, 0, 0 );
 
         sun = new THREE.Vector3( 1, 1, 1 );
         sun.normalize();
 
         canvas = document.createElement( 'canvas' );
         canvas.width = width;
         canvas.height = height;
 
         context = canvas.getContext( '2d' );
         context.fillStyle = '#000';
         context.fillRect( 0, 0, width, height );
 
         image = context.getImageData( 0, 0, canvas.width, canvas.height );
         imageData = image.data;
 
         for ( var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++ ) {
 
           vector3.x = data[ j - 2 ] - data[ j + 2 ];
           vector3.y = 2;
           vector3.z = data[ j - width * 2 ] - data[ j + width * 2 ];
           vector3.normalize();
 
           shade = vector3.dot( sun );
 
           imageData[ i ] = ( 96 + shade * 128 ) * ( 0.5 + data[ j ] * 0.007 );
           imageData[ i + 1 ] = ( 32 + shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
           imageData[ i + 2 ] = ( shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
         }
 
         context.putImageData( image, 0, 0 );
 
         // Scaled 4x
 
         canvasScaled = document.createElement( 'canvas' );
         canvasScaled.width = width * 4;
         canvasScaled.height = height * 4;
 
         context = canvasScaled.getContext( '2d' );
         context.scale( 4, 4 );
         context.drawImage( canvas, 0, 0 );
 
         image = context.getImageData( 0, 0, canvasScaled.width, canvasScaled.height );
         imageData = image.data;
 
         for ( var i = 0, l = imageData.length; i < l; i += 4 ) {
 
           var v = ~~ ( Math.random() * 5 );
 
           imageData[ i ] += v;
           imageData[ i + 1 ] += v;
           imageData[ i + 2 ] += v;
 
         }
 
         context.putImageData( image, 0, 0 );
 
         return canvasScaled;
 
       }

/*
			function generateTexture( data, width, height ) {

				var canvas, canvasScaled, context, image, imageData,
				level, diff, vector3, sun, shade;

				vector3 = new THREE.Vector3( 0, 0, 0 );

				sun = new THREE.Vector3( 1, 1, 1 );
				sun.normalize();

				canvas = document.createElement( 'canvas' );
				canvas.width = width;
				canvas.height = height;

				context = canvas.getContext( '2d' );
				context.fillStyle = '#a0a0a0';
				context.fillRect( 0, 0, width, height );

				image = context.getImageData( 0, 0, canvas.width, canvas.height );
				imageData = image.data;

				//for ( var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++ ) {
				for ( var i = 0, j = 0, l = 8; i < l; i += 1, j ++ ) {

					vector3.x = data[ j ];
					vector3.y = 2;
					vector3.z = data[ j ];
					vector3.normalize();

					shade = vector3.dot( sun );

					imageData[ i ] = ( 96 + shade * 128 ) * ( 0.5 + data[ j ] * 0.007 );
					imageData[ i + 1 ] = ( 32 + shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
					imageData[ i + 2 ] = ( shade * 96 ) * ( 0.5 + data[ j ] * 0.007 );
				}

				context.putImageData( image, 0, 0 );

				// Scaled 4x

				canvasScaled = document.createElement( 'canvas' );
				canvasScaled.width = width * 4;
				canvasScaled.height = height * 4;

				context = canvasScaled.getContext( '2d' );
				context.scale( 4, 4 );
				context.drawImage( canvas, 0, 0 );

				image = context.getImageData( 0, 0, canvasScaled.width, canvasScaled.height );
				imageData = image.data;

				//for ( var i = 0, l = imageData.length; i < l; i += 4 ) {
				for ( var i = 0, l = 8; i < l; i += 1 ) {

					var v = 3; //~~ ( Math.random() * 5 );

					imageData[ i ] += v;
					imageData[ i + 1 ] += v;
					imageData[ i + 2 ] += v;

				}

				context.putImageData( image, 0, 0 );

				return canvasScaled;

			}
*/

			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}


			function render() {

				raycaster = projector.pickingRay( mouse2D.clone(), camera );
				//controls.update( clock.getDelta() );
        camera.rotation.y = .3;
        camera.lookAt( scene.position );
				renderer.render( scene, camera );

			}

		</script>

	</body>
</html>
